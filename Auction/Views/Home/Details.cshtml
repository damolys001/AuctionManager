@model AuctionDataFactory.Salvage
@{
    ViewBag.Title = "Bid";
}


<div class="row">
    <div class=" col-md-7 ">
        <div class="box box-primary">
            <div class="box-header">
                <h3 id="" class="box-title">
                    Item: @Model.Name
                </h3>
                <div class="box-tools">
                    <!-- Create -->
                    <label>Going Price: </label><label id="goingprice" class="text-danger">@Model.MinimumValue</label>
                    <input type="hidden" id="minbid" />
                </div>
            </div>
            <div class="box-body">
                <!-- table -->
                <h2 id="highestbid" class="text-primary">
                    Highest Bid: 0
                </h2>
            </div>
            <div class="box-footer">
                @Html.AntiForgeryToken()
                @Html.ValidationSummary(true)
                <div class="input-group">
                    @Html.TextBox("message", null, new { @class = "form-control", placeholder = "Bid", type = "number", required = "required" })

                    <div class="input-group-btn">
                        <input id="sendmessage" type="submit" class="btn btn-success" value="Send" disabled="disabled" />
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class=" col-md-5 ">
        <div class="box box-primary">
            <div class="box-header">
                <h3 class="box-title">
                    <!-- title -->
                    Bid History
                </h3>
                <div class="box-tools">
                    <!-- Create -->
                    <label class="text-danger" id="timer"></label>

                </div>
            </div>
            <div class="box-body">
                <!-- table -->
                <input type="hidden" id="displayname" />
                <ul id="discussion"></ul>
            </div>
        </div>
    </div>

</div>
<div class="row">
    <div class=" col-md-5 ">
        <div class="box box-primary">
            <div class="box-header">
                <h3 class="box-title">
                    <!-- title -->
                    Admin Console
                </h3>
                <div class="box-tools">
                    <!-- Create -->
                    <label class="text-danger"></label>

                </div>
            </div>
            <div class="box-body">
                <!-- table -->
                <input type="submit" class="btn btn-success" value="Start Bid" id="startBid" />
                <input type="submit" class="btn btn-danger" value="Save Result" />
            </div>
        </div>
    </div>
</div>
<div class="container">
    @*<input type="text" id="message" />*@


</div>
@section scripts {
    <!--Script references. -->
    <!--The jQuery library is required and is referenced by default in _Layout.cshtml. -->
    <!--Reference the SignalR library. -->
    <script src="~/Scripts/jquery.signalR-2.3.0.min.js"></script>
    <!--Reference the autogenerated SignalR hub script. -->
    <script src="~/signalr/hubs"></script>
    <!--SignalR script to update the chat page and send messages.-->
    <script>
    var countDownDate = new Date().getTime() + (1000 * 60 * 30);
    $(function() {
        // Reference the auto-generated proxy for the hub.
        var chat = $.connection.chatHub;
        // Create a function that the hub can call back to display messages.
        chat.client.startBid = function () {
            $('#sendmessage').removeAttr("disabled");
            $('#startBid').attr("disabled", "disabled");
            // Update the count down every 1 second
            var x = setInterval(function () {

                // Get todays date and time
                var now = new Date().getTime();

                // Find the distance between now and the count down date
                var distance = countDownDate - now;

                // Time calculations for days, hours, minutes and seconds
                var days = Math.floor(distance / (1000 * 60 * 60 * 24));
                var hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
                var minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
                var seconds = Math.floor((distance % (1000 * 60)) / 1000);

                // Display the result in the element with id="demo"
                document.getElementById("timer").innerHTML = days + "d " + hours + "h "
                    + minutes + "m " + seconds + "s ";

                // If the count down is finished, write some text
                if (distance < 0) {
                    $('#sendmessage').attr("disabled", "disabled");
                    clearInterval(x);
                    document.getElementById("timer").innerHTML = "EXPIRED";
                }
            }, 1000);
        };
        chat.client.addNewMessageToPage = function(name, message, minbid) {
            //alert(minbid);
            //if (parseFloat(message) < $('#minbid').val()) {
            //    alert("Bid must be >= " + $('#minbid').val());
            //    return;
            //}
            //Set new Minium NBid Value with set %
            //var newBidVal = (parseFloat(message) * (5 / 100) + parseFloat(message));
            //alert(newBidVal);

            countDownDate = new Date().getTime() + (1000 * 20);

            $('#minbid').val(minbid);
            $('#goingprice').html("\u20A6" + minbid);
            // Add the message to the page.
            $('#discussion').append('<li><strong>' + htmlEncode(name)
                + '</strong>: ' + htmlEncode(message) + '</li>');
            //$('#highestbid').html("");
            $('#highestbid').html("Highest Bid (" + htmlEncode(name) + "): \u20A6" + htmlEncode(message));

        };
        //Set Minimum Bid Value
        $('#minbid').val(@Model.MinimumValue);
        // Get the user name and store it to prepend to messages.
        @{
            var user = User.Identity.Name.Split('@');
            
        }
        $('#displayname').val('@user[0]');
        // Set initial focus to message input box.
        $('#message').focus();
        // Start the connection.
        $.connection.hub.start().done(function() {
            $('#sendmessage').click(function () {
                var message = parseFloat($('#message').val());
                if (parseFloat(message) < $('#minbid').val()) {
                    alert("Bid must be >= " + $('#minbid').val());
                    $('#message').val('').focus();
                    return false;
                }
                var ration=@Model.IncreaseRatio;
                var newBidVal = (parseFloat(message) * ( ration/ 100) + parseFloat(message));
                // Call the Send method on the hub.
                chat.server.bid($('#displayname').val(), parseFloat($('#message').val()), newBidVal);
                // Clear text box and reset focus for next comment.
                $('#message').val('').focus();
            });
            $('#startBid').click(function() {
                chat.server.startBid();
            });
        });
    });

    // This optional function html-encodes messages for display in the page.
    function htmlEncode(value) {
        var encodedValue = $('<div />').text(value).html();
        return encodedValue;
    }
    </script>

}
